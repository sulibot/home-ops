# roles/k8s_init/tasks/main.yaml

- name: Check if control-plane is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubeadm_init_stat

- name: Render kubeadm-init.yaml (first CP only)
  template:
    src: ../../../templates/kubeadm-init.yaml.j2
    dest: /root/kubeadm-init.yaml
  when: not kubeadm_init_stat.stat.exists

- name: Run kubeadm init (first control-plane)
  ansible.builtin.command:
    argv:
      - kubeadm
      - init
      - --config
      - /root/kubeadm-init.yaml
      - --upload-certs
  args:
    creates: /etc/kubernetes/admin.conf
  when: not kubeadm_init_stat.stat.exists

- name: Wait for kube-apiserver port to be open
  ansible.builtin.wait_for:
    host: "{{ control_plane_vip }}"
    port: 6443
    timeout: 60
  when: not kubeadm_init_stat.stat.exists

- name: Render CoreDNS configuration
  template:
    src: ../../../templates/coredns-configmap.yaml.j2
    dest: /root/coredns-configmap.yaml
  when: not kubeadm_init_stat.stat.exists

- name: Apply CoreDNS configuration
  ansible.builtin.command:
    argv:
      - kubectl
      - --kubeconfig=/etc/kubernetes/admin.conf
      - apply
      - -f
      - /root/coredns-configmap.yaml
  register: coredns_apply
  retries: 5
  delay: 6
  until: coredns_apply.rc == 0
  when: not kubeadm_init_stat.stat.exists

- name: Restart CoreDNS deployment
  ansible.builtin.command:
    argv:
      - kubectl
      - --kubeconfig=/etc/kubernetes/admin.conf
      - -n
      - kube-system
      - rollout
      - restart
      - deployment/coredns
  register: coredns_restart
  retries: 5
  delay: 6
  until: coredns_restart.rc == 0
  when: not kubeadm_init_stat.stat.exists

- name: Upload kubeadm config to cluster (required for node joins)
  ansible.builtin.command:
    cmd: kubeadm init phase upload-config kubeadm --config /root/kubeadm-init.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/super-admin.conf
  become: true
  when: not kubeadm_init_stat.stat.exists

- name: Upload kubelet config to cluster (required for node joins)
  ansible.builtin.command:
    cmd: kubeadm init phase upload-config kubelet --config /root/kubeadm-init.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/super-admin.conf
  become: true
  when: not kubeadm_init_stat.stat.exists

- name: Create cluster-info ConfigMap and RBAC for node joins
  ansible.builtin.command:
    cmd: kubeadm init phase bootstrap-token --skip-token-print
  environment:
    KUBECONFIG: /etc/kubernetes/super-admin.conf
  become: true
  when: not kubeadm_init_stat.stat.exists

- name: Render bootstrap RBAC manifest for kubeadm configmaps
  template:
    src: ../../../templates/kubeadm-bootstrap-rbac.yaml.j2
    dest: /root/kubeadm-bootstrap-rbac.yaml

- name: Apply bootstrap RBAC manifest
  ansible.builtin.command:
    argv:
      - kubectl
      - --server={{ 'https://[' ~ ansible_host ~ ']:6443' if ':' in ansible_host else 'https://' ~ ansible_host ~ ':6443' }}
      - --kubeconfig=/etc/kubernetes/super-admin.conf
      - --validate=false
      - apply
      - -f
      - /root/kubeadm-bootstrap-rbac.yaml

- name: Check if cluster-info ConfigMap exists
  ansible.builtin.command:
    argv:
      - kubectl
      - --server={{ 'https://[' ~ ansible_host ~ ']:6443' if ':' in ansible_host else 'https://' ~ ansible_host ~ ':6443' }}
      - --kubeconfig=/etc/kubernetes/super-admin.conf
      - get
      - configmap
      - cluster-info
      - -n
      - kube-public
  register: cluster_info_check
  changed_when: false
  failed_when: false

- name: Ensure cluster-info ConfigMap and bootstrap tokens exist
  ansible.builtin.command:
    argv:
      - kubeadm
      - init
      - phase
      - bootstrap-token
      - --skip-token-print
      - --config
      - /root/kubeadm-init.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/super-admin.conf
  when: cluster_info_check.rc != 0

- name: Check kubeadm-config ConfigMap exists
  ansible.builtin.command:
    argv:
      - kubectl
      - --server={{ 'https://[' ~ ansible_host ~ ']:6443' if ':' in ansible_host else 'https://' ~ ansible_host ~ ':6443' }}
      - --kubeconfig=/etc/kubernetes/super-admin.conf
      - get
      - configmap
      - kubeadm-config
      - -n
      - kube-system
  register: kubeadm_config_check
  changed_when: false
  failed_when: false

- name: Re-upload kubeadm config when missing
  ansible.builtin.command:
    argv:
      - kubeadm
      - init
      - phase
      - upload-config
      - kubeadm
      - --config
      - /root/kubeadm-init.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/super-admin.conf
  when: kubeadm_config_check.rc != 0

- name: Re-upload kubelet config when missing
  ansible.builtin.command:
    argv:
      - kubeadm
      - init
      - phase
      - upload-config
      - kubelet
      - --config
      - /root/kubeadm-init.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/super-admin.conf
  when: kubeadm_config_check.rc != 0

- name: Create remote kube dir
  file:
    path: /root/.kube
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Install admin.conf on the host
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    owner: root
    group: root
    mode: '0644'

- name: Create local kube dir
  delegate_to: localhost
  run_once: true
  become: false
  file:
    path: "{{ lookup('env','HOME') }}/.kube"
    state: directory
    mode: '0755'


- name: Fetch remote kubeconfig to local machine
  run_once: true
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: /Users/sulibot/.kube/config
    flat: yes
