---
# Playbook: Update 1Password Connect Credentials
# Description: Fetches 1Password Connect credentials from 1Password vault and deploys to cluster
# Usage: ansible-playbook playbooks/update-1password-credentials.yaml
# Requirements:
#   - OP_SERVICE_ACCOUNT_TOKEN environment variable set
#   - 1Password CLI installed (op)
#   - SOPS installed
#   - kubectl configured
#   - flux CLI installed

- name: Update 1Password Connect Credentials for External Secrets
  hosts: localhost
  gather_facts: yes

  vars:
    # Repository configuration
    repo_path: "{{ playbook_dir }}/../../.."
    secret_path: kubernetes/manifests/apps/external-secrets/external-secrets/stores/secret.sops.yaml
    token_file: "{{ playbook_dir }}/../secrets/1password-token.sops.yaml"

    # 1Password configuration
    op_vault: Kubernetes
    op_item: 1password-connect
    op_field: credentials

    # Kubernetes configuration
    k8s_namespace: external-secrets
    k8s_secret_name: onepassword-secret
    clustersecretstore_name: onepassword-connect

    # Timeouts
    pod_ready_timeout: 120
    css_ready_timeout: 120
    flux_timeout: 180

  pre_tasks:
    - name: Check if SOPS token file exists
      stat:
        path: "{{ token_file }}"
      register: token_file_stat

    - name: Load OP_SERVICE_ACCOUNT_TOKEN from SOPS file
      block:
        - name: Decrypt SOPS token file
          shell: |
            cd {{ repo_path }} && sops -d ansible/k8s/secrets/1password-token.sops.yaml | grep 'op_service_account_token:' | awk '{print $2}'
          register: sops_token
          no_log: true
          changed_when: false

        - name: Set token fact from SOPS
          set_fact:
            op_service_account_token: "{{ sops_token.stdout }}"
          no_log: true

        - name: Display token source
          debug:
            msg: "‚úÖ Using OP_SERVICE_ACCOUNT_TOKEN from SOPS file"
      when: token_file_stat.stat.exists

    - name: Load OP_SERVICE_ACCOUNT_TOKEN from environment
      block:
        - name: Check environment variable
          fail:
            msg: |
              OP_SERVICE_ACCOUNT_TOKEN is not set and SOPS file doesn't exist.

              Please either:
              1. Set environment variable: export OP_SERVICE_ACCOUNT_TOKEN='ops_...'
              2. Create encrypted file: {{ token_file }}

              To create the encrypted file:
                1. Edit: vim {{ token_file }}
                2. Add: op_service_account_token: ops_...
                3. Encrypt: sops --encrypt --in-place {{ token_file }}
          when: lookup('env', 'OP_SERVICE_ACCOUNT_TOKEN') == ''

        - name: Set token fact from environment
          set_fact:
            op_service_account_token: "{{ lookup('env', 'OP_SERVICE_ACCOUNT_TOKEN') }}"
          no_log: true

        - name: Display token source
          debug:
            msg: "‚úÖ Using OP_SERVICE_ACCOUNT_TOKEN from environment variable"
      when: not token_file_stat.stat.exists

    - name: Check required tools are installed
      command: "which {{ item }}"
      register: tool_check
      failed_when: tool_check.rc != 0
      loop:
        - op
        - sops
        - kubectl
        - flux
        - git
      changed_when: false

    - name: Display environment info
      debug:
        msg:
          - "Repository path: {{ repo_path }}"
          - "Secret path: {{ secret_path }}"
          - "1Password vault: {{ op_vault }}"
          - "1Password item: {{ op_item }}"

  tasks:
    - name: Fetch 1Password Connect credentials from vault
      block:
        - name: Read credentials from 1Password
          shell: |
            op read "op://{{ op_vault }}/{{ op_item }}/{{ op_field }}"
          environment:
            OP_SERVICE_ACCOUNT_TOKEN: "{{ op_service_account_token }}"
          register: op_credentials
          no_log: true
          changed_when: false

        - name: Validate credentials format
          set_fact:
            credentials_json: "{{ op_credentials.stdout }}"
          no_log: true

        - name: Read token from 1Password
          shell: |
            op read "op://{{ op_vault }}/{{ op_item }}/token"
          environment:
            OP_SERVICE_ACCOUNT_TOKEN: "{{ op_service_account_token }}"
          register: op_token
          no_log: true
          changed_when: false

        - name: Set token fact
          set_fact:
            connect_token: "{{ op_token.stdout }}"
          no_log: true

        - name: Display success message
          debug:
            msg: "‚úÖ Successfully fetched credentials and token from 1Password vault '{{ op_vault }}'"
      rescue:
        - name: Display error details
          fail:
            msg: |
              ‚ùå Failed to fetch credentials from 1Password.

              Possible issues:
              1. OP_SERVICE_ACCOUNT_TOKEN is invalid or expired
              2. The item 'op://{{ op_vault }}/{{ op_item }}/{{ op_field }}' doesn't exist
              3. Service Account doesn't have access to the vault

              Please check:
              - Your 1Password Service Account token is valid
              - The vault '{{ op_vault }}' exists
              - The item '{{ op_item }}' exists in that vault
              - The field '{{ op_field }}' exists in that item

    - name: Create secret file with credentials
      block:
        - name: Generate secret YAML content
          set_fact:
            secret_content: |
              ---
              apiVersion: v1
              kind: Secret
              metadata:
                name: {{ k8s_secret_name }}
                namespace: {{ k8s_namespace }}
              type: Opaque
              stringData:
                1password-credentials.json: "{{ credentials_json }}"
                token: "{{ connect_token }}"

        - name: Write secret file
          copy:
            content: "{{ secret_content }}"
            dest: "{{ repo_path }}/{{ secret_path }}"
            mode: '0600'

        - name: Display secret file location
          debug:
            msg: "‚úÖ Created secret file at {{ secret_path }}"

    - name: Encrypt secret with SOPS
      block:
        - name: Run SOPS encryption
          shell: |
            sops --encrypt --in-place {{ secret_path }}
          args:
            chdir: "{{ repo_path }}"
          register: sops_result

        - name: Verify encryption
          shell: |
            grep -q "sops:" {{ secret_path }} && echo "encrypted" || echo "not encrypted"
          args:
            chdir: "{{ repo_path }}"
          register: encryption_check
          changed_when: false

        - name: Fail if encryption didn't work
          fail:
            msg: "‚ùå SOPS encryption failed - secret file is not encrypted"
          when: "'encrypted' not in encryption_check.stdout"

        - name: Display encryption success
          debug:
            msg: "‚úÖ Secret successfully encrypted with SOPS"

    - name: Commit and push changes
      block:
        - name: Check git status
          shell: |
            git status --porcelain {{ secret_path }}
          args:
            chdir: "{{ repo_path }}"
          register: git_status
          changed_when: false

        - name: Stage secret file
          shell: |
            git add {{ secret_path }}
          args:
            chdir: "{{ repo_path }}"
          when: git_status.stdout != ""

        - name: Commit changes
          shell: |
            git commit -m "Update 1Password Connect credentials [automated]

            Updated by Ansible playbook: update-1password-credentials.yaml
            Timestamp: {{ ansible_date_time.iso8601 }}

            ü§ñ Generated with Ansible

            Co-Authored-By: Ansible <noreply@ansible.com>"
          args:
            chdir: "{{ repo_path }}"
          register: git_commit
          when: git_status.stdout != ""
          failed_when: false

        - name: Push to remote
          shell: |
            git push
          args:
            chdir: "{{ repo_path }}"
          when: git_status.stdout != ""
          register: git_push

        - name: Display git results
          debug:
            msg: "{{ 'No changes to commit' if git_status.stdout == '' else '‚úÖ Changes committed and pushed to remote' }}"

    - name: Deploy via Flux
      block:
        - name: Reconcile Flux GitRepository
          shell: |
            flux reconcile source git flux-system -n flux-system --timeout={{ flux_timeout }}s
          register: flux_sync
          failed_when: false

        - name: Display Flux sync status
          debug:
            msg: "{{ '‚úÖ Flux GitRepository reconciled' if flux_sync.rc == 0 else '‚ö†Ô∏è  Flux sync had issues but continuing' }}"

        - name: Reconcile apps kustomization
          shell: |
            flux reconcile kustomization apps -n flux-system --timeout={{ flux_timeout }}s
          register: flux_apps
          failed_when: false

        - name: Display apps reconciliation status
          debug:
            msg: "{{ '‚úÖ Apps kustomization reconciled' if flux_apps.rc == 0 else '‚ö†Ô∏è  Apps reconciliation had issues but continuing' }}"

    - name: Verify deployment
      block:
        - name: Wait for onepassword pod to be ready
          shell: |
            kubectl wait --for=condition=ready pod \
              -l app.kubernetes.io/name=onepassword \
              -n {{ k8s_namespace }} \
              --timeout={{ pod_ready_timeout }}s
          register: pod_ready
          failed_when: false

        - name: Check pod status if wait failed
          shell: |
            kubectl get pods -n {{ k8s_namespace }} -l app.kubernetes.io/name=onepassword
          register: pod_status
          when: pod_ready.rc != 0

        - name: Display pod status
          debug:
            msg: "{{ pod_status.stdout_lines }}"
          when: pod_ready.rc != 0

        - name: Check onepassword pod logs for errors
          shell: |
            kubectl logs -n {{ k8s_namespace }} -l app.kubernetes.io/name=onepassword -c api --tail=20
          register: pod_logs
          when: pod_ready.rc != 0

        - name: Display pod logs
          debug:
            msg: "{{ pod_logs.stdout_lines }}"
          when: pod_ready.rc != 0

        - name: Wait for ClusterSecretStore to be ready
          shell: |
            kubectl get clustersecretstore {{ clustersecretstore_name }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
          register: css_status
          until: css_status.stdout == "True"
          retries: "{{ (css_ready_timeout / 10) | int }}"
          delay: 10
          failed_when: false

        - name: Get ClusterSecretStore details if not ready
          shell: |
            kubectl describe clustersecretstore {{ clustersecretstore_name }}
          register: css_details
          when: css_status.stdout != "True"

        - name: Display ClusterSecretStore status
          debug:
            msg: "{{ css_details.stdout_lines }}"
          when: css_status.stdout != "True"

  post_tasks:
    - name: Display final status
      debug:
        msg:
          - "============================================"
          - "  1Password Connect Credentials Update"
          - "============================================"
          - ""
          - "Status: {{ '‚úÖ SUCCESS' if css_status.stdout == 'True' else '‚ö†Ô∏è  PARTIAL SUCCESS' }}"
          - ""
          - "Details:"
          - "  - Credentials fetched: ‚úÖ"
          - "  - Secret encrypted: ‚úÖ"
          - "  - Git commit: {{ '‚úÖ' if git_status.stdout != '' else '‚ÑπÔ∏è No changes' }}"
          - "  - Flux sync: {{ '‚úÖ' if flux_sync.rc == 0 else '‚ö†Ô∏è' }}"
          - "  - Pod ready: {{ '‚úÖ' if pod_ready.rc == 0 else '‚ùå' }}"
          - "  - ClusterSecretStore: {{ '‚úÖ' if css_status.stdout == 'True' else '‚ùå' }}"
          - ""
          - "{{ 'All systems operational! External Secrets is ready to use.' if css_status.stdout == 'True' else 'Some issues detected. Check the logs above for details.' }}"

    - name: Fail if critical components are not ready
      fail:
        msg: |
          ‚ùå Deployment verification failed!

          The credentials were updated but the system is not fully operational.
          Please check:
          1. Pod logs: kubectl logs -n {{ k8s_namespace }} -l app.kubernetes.io/name=onepassword
          2. ClusterSecretStore: kubectl describe clustersecretstore {{ clustersecretstore_name }}
      when: css_status.stdout != "True"
