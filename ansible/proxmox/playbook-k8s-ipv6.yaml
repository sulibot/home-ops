---
- name: Bootstrap primary controlplane (IPv6â€‘only)
  hosts: "{{ groups['controlplane'][0] }}"
  become: true
  vars:
    # groups in your inventory
    controlplane_group: controlplane
    worker_group:      worker

    # no port here; Cilium BGP will advertise it
    k8s_api_vip:        "fd00:101::ac"
    k8s_version_major:  "1.32"
    ipv6_pod_cidr:      "fd00:101:44::/60"
    ipv6_service_cidr:  "fd00:101:96::/108"

    cilium_helm_values:
      kubeProxyReplacement: true
      k8sServiceHost: "{{ k8s_api_vip }}"
      k8sServicePort: 6443
      ipam:
        mode: cluster-pool
        clusterPoolIPv6PodCIDR: "{{ ipv6_pod_cidr }}"
        clusterPoolIPv6MaskSize: 64
      enableIPv6: true
      enableIPv4: false
      bgpControlPlane:
        enabled: true
        localASN: 64512
        peers:
          - peerAddress: "fd00:8::1"
            peerASN:     65000
      service:
        loadBalancer:
          mode: bgp
      hubble:
        relay: { enabled: true }
        ui:    { enabled: true }
      l2announcements: { enabled: true }
      ingressController:
        enabled: true
        mode:    dedicated

  tasks:
    # 1) APT prereqs + sysctl
    - name: Add Kubernetes APT key
      ansible.builtin.apt_key:
        url:      "https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_major }}/deb/Release.key"
        keyring:  /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state:    present

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: >
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg]
          https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_major }}/deb/ /
        filename: kubernetes
        state:    present

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Persist IPv6 forwarding across reboots
      ansible.builtin.sysctl:
        name:       net.ipv6.conf.all.forwarding
        value:      "1"
        sysctl_set: yes
        reload:     yes

    # 2) discover the exact Debian package version and derive semver
    - name: Discover latest k8s patch for v{{ k8s_version_major }}
      ansible.builtin.shell: |
        apt-cache madison kubelet \
          | awk '/{{ k8s_version_major }}\./ {print $3}' \
          | sort -Vr | head -n1
      register: k8s_patch
      changed_when: false

    - name: Fail if no matching patch found
      ansible.builtin.fail:
        msg: "No kubelet version matching {{ k8s_version_major }}; got: {{ k8s_patch.stdout }}"
      when: k8s_patch.stdout == ""

    - name: Set full Debian version fact
      ansible.builtin.set_fact:
        k8s_version: "{{ k8s_patch.stdout }}"

    - name: Derive pure semver for image tags
      ansible.builtin.set_fact:
        k8s_semver: "{{ k8s_version.split('-')[0] }}"

    # 3) Install the exact Kubernetes components
    - name: Install kubelet, kubeadm, kubectl
      ansible.builtin.apt:
        name:
          - "kubelet={{ k8s_version }}"
          - "kubeadm={{ k8s_version }}"
          - "kubectl={{ k8s_version }}"
        state: present
        update_cache: false

    # 4) Render & run kubeadm init
    - name: Render kubeadm init config
      ansible.builtin.template:
        src:  kubeadm-init.yaml.j2
        dest: /root/kubeadm-init.yaml

    - name: Pre-pull control-plane images
      ansible.builtin.command:
        cmd: kubeadm config images pull --kubernetes-version=v{{ k8s_semver }} --image-repository registry.k8s.io

    - name: Initialize primary controlplane
      ansible.builtin.command:
        cmd: >-
          kubeadm init
            --upload-certs
            --config /root/kubeadm-init.yaml
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Fail if kubeadm init failed
      ansible.builtin.fail:
        msg: "kubeadm init failed: {{ kubeadm_init.stderr }}"
      when: kubeadm_init.rc != 0

    - name: Bring VIP up on loopback
      ansible.builtin.command:
        cmd: ip -6 addr add {{ k8s_api_vip }}/128 dev lo

    - name: Wait for API server on VIP
      ansible.builtin.wait_for:
        host:    "{{ k8s_api_vip }}"
        port:    6443
        state:   started
        timeout: 300

    # 5) Extract both join commands
    - name: Extract controlplane join command
      ansible.builtin.set_fact:
        controlplane_join_cmd: >-
          {{ kubeadm_init.stdout
             | regex_search('kubeadm join[\\s\\S]*?--control-plane[^\\n]*', '\\0')
             | replace('\\\n',' ') | replace('\\','') | trim }}

    - name: Extract worker join command
      ansible.builtin.set_fact:
        worker_join_cmd: >-
          {{ kubeadm_init.stdout
             | regex_search('kubeadm join[\\s\\S]*?--discovery-token-ca-cert-hash[^\\n]*', '\\0')
             | replace('\\\n',' ') | replace('\\','') | trim }}

    # 6) Store them together for the next play
    - name: Bundle join commands into a single fact
      ansible.builtin.set_fact:
        join_cmds:
          controlplane: "{{ controlplane_join_cmd }}"
          worker:       "{{ worker_join_cmd }}"

- name: Install prerequisites & join all other nodes
  hosts: all
  become: true
  vars:
    primary: "{{ groups['controlplane'][0] }}"

  tasks:
    # repeat the APT prereqs + install so that workers also have kubeadm/kubelet
    - name: Add Kubernetes APT key
      ansible.builtin.apt_key:
        url:      "https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_major }}/deb/Release.key"
        keyring:  /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state:    present

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: >
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg]
          https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_major }}/deb/ /
        filename: kubernetes
        state:    present

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Persist IPv6 forwarding
      ansible.builtin.sysctl:
        name:       net.ipv6.conf.all.forwarding
        value:      "1"
        sysctl_set: yes
        reload:     yes

    - name: Install kubelet, kubeadm, kubectl
      ansible.builtin.apt:
        name:
          - "kubelet={{ k8s_version }}"
          - "kubeadm={{ k8s_version }}"
          - "kubectl={{ k8s_version }}"
        state: present
        update_cache: false

    # 7a) Secondary controlplane join
    - name: Join additional controlplane nodes
      ansible.builtin.command:
        cmd: "{{ hostvars[primary].join_cmds.controlplane }} --cri-socket /run/containerd/containerd.sock"
        creates: /etc/kubernetes/kubelet.conf
      when: inventory_hostname in groups['controlplane'] and inventory_hostname != primary

    # 7b) Worker join
    - name: Join worker nodes
      ansible.builtin.command:
        cmd: "{{ hostvars[primary].join_cmds.worker }} --cri-socket /run/containerd/containerd.sock"
        creates: /etc/kubernetes/kubelet.conf
      when: inventory_hostname in groups['worker']

- name: Install & configure Cilium via Helm
  hosts: "{{ groups['controlplane'][0] }}"
  become: true

  tasks:
    - name: Ensure Helm is installed
      ansible.builtin.shell: |
        curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates:    /usr/local/bin/helm
        executable: /bin/bash

    - name: Copy admin kubeconfig for Helm
      ansible.builtin.copy:
        src:        /etc/kubernetes/admin.conf
        dest:       /root/.kube/config
        remote_src: true
        mode:       "0600"

    - name: Add Cilium Helm repo
      kubernetes.core.helm_repository:
        name:     cilium
        repo_url: https://helm.cilium.io

    - name: Deploy Cilium
      kubernetes.core.helm:
        name:              cilium
        chart_ref:         cilium/cilium
        release_namespace: kube-system
        values:            "{{ cilium_helm_values }}"
        create_namespace:  false
        kubeconfig:        /root/.kube/config
