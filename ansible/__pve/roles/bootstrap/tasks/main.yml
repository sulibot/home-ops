---
# roles/bootstrap/tasks/main.yml

# 0) Clean up repos
- name: Remove Proxmox and Ceph enterprise list files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/sources.list.d/pve-enterprise.list
    - /etc/apt/sources.list.d/ceph.list
    - /etc/apt/sources.list.d/ceph-quincy.list

- name: Comment out enterprise lines in sources.list
  replace:
    path: /etc/apt/sources.list
    regexp: '^(deb .*enterprise\\.proxmox\\.com.*|deb .*ceph-quincy.*)$'
    replace: '# \0'

# 1) Add public repos
- name: Add Proxmox no-subscription repo
  apt_repository:
    filename: pve-no-subscription
    repo: "deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-no-subscription"
    state: present


- name: Add Ceph-Squid repo
  apt_repository:
    filename: ceph-squid
    repo: "deb http://download.proxmox.com/debian/ceph-squid {{ ansible_distribution_release }} no-subscription"
    state: present

- name: Install Proxmox VE release GPG key
  apt_key:
    url: "https://enterprise.proxmox.com/debian/proxmox-release-{{ ansible_distribution_release }}.gpg"
    state: present

- name: Update apt cache
  apt:
    update_cache: yes

# 2) Install base packages
- name: Install Proxmox meta-package and HA manager
  apt:
    name:
      - proxmox-ve
      - pve-ha-manager
    state: present
    update_cache: no

- name: Load ipmi_watchdog module now
  modprobe:
    name: ipmi_watchdog
  ignore_errors: true

- name: Ensure watchdog modules load on boot
  copy:
    dest: /etc/modules-load.d/watchdog.conf
    content: |
      ipmi_watchdog
      nmi_watchdog
    mode: '0644'

# 3) Terraform setup (run once)
- name: Create Terraform user
  shell: |
    if ! pveum user list | grep -qw 'terraform@pve'; then
      pveum user add terraform@pve
    fi
  run_once: true

- name: Create Terraform role
  shell: |
    if ! pveum role list | grep -qw 'Terraform'; then
      pveum role add Terraform \
        -privs "Datastore.Allocate Datastore.AllocateSpace Datastore.AllocateTemplate \
        Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify SDN.Use \
        VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit \
        VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory \
        VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor \
        VM.PowerMgmt User.Modify"
    fi
  run_once: true

- name: Assign Terraform role
  shell: |
    if ! pveum acl list / | grep -E "terraform@pve.*Terraform"; then
      pveum aclmod / -user terraform@pve -role Terraform
    fi
  run_once: true

- name: Create Terraform API token
  shell: |
    if ! pveum user token list terraform@pve | grep -qw provider; then
      pveum user token add terraform@pve provider --privsep=0
    fi
  register: tf_token
  run_once: true

# 4) SSH Preseed
- name: Ensure known_hosts file exists
  file:
    path: /root/.ssh/known_hosts
    state: touch
    mode: '0600'

- name: Preseed SSH host keys for all nodes
  shell: ssh-keyscan -T 5 -t ed25519 {{ hostvars[item].ansible_host }} >> /root/.ssh/known_hosts
  loop: "{{ groups['pve'] }}"
  when: hostvars[item].ansible_host != ansible_host
  changed_when: false

# 5) Cluster setup
- name: Create Proxmox cluster on bootstrap node
  command: >
    pvecm create {{ pve_cluster_name }} \
      --link0 address={{ hostvars[inventory_hostname].ansible_host }},priority=1
  args:
    creates: /etc/pve/corosync.conf
  run_once: true
  delegate_to: "{{ groups['pve'][0] }}"
  when: inventory_hostname == groups['pve'][0]

- name: Enforce Corosync IPv6 mode
  lineinfile:
    path: /etc/pve/corosync.conf
    regexp: '^\s*ip_version:'
    line: '  ip_version: ipv6'
  notify: restart corosync
  when: inventory_hostname == groups['pve'][0]

#- name: Set expected votes for quorum
#  command: pvecm expected {{ groups['pve'] | length }}
#  when: inventory_hostname == groups['pve'][0]
#  run_once: true
#  delegate_to: "{{ groups['pve'][0] }}"

- name: Ensure cluster services are running before joining
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - pve-cluster
    - corosync
    - pvestatd

- name: Join each additional node sequentially to the cluster
  shell: |
    export PVE_SSH_ARGS="-o StrictHostKeyChecking=no \
                         -o UserKnownHostsFile=/dev/null \
                         -o ForwardAgent=yes"
    echo "[INFO] {{ inventory_hostname }} joining cluster via {{ groups['pve'][0] }}"
    pvecm add {{ hostvars[groups['pve'][0]].ansible_service_host }} \
      --link0 address={{ ansible_service_host }},priority=1 \
      --use_ssh
  args:
    # remove creates entirely
  when: inventory_hostname != groups['pve'][0]
  delegate_to: "{{ inventory_hostname }}"
  throttle: 1

