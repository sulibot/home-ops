---
# playbooks/tasks/main.yml
# 1) Terraform support (first node only)
- name: Create Terraform user if missing
  shell: |
    if ! pveum user list | grep -qw 'terraform@pve'; then
      pveum user add terraform@pve
    fi
  run_once: true

- name: Create Terraform role if missing
  shell: |
    if ! pveum role list | grep -qw 'Terraform'; then
      pveum role add Terraform \
        -privs "Datastore.Allocate Datastore.AllocateSpace Datastore.AllocateTemplate \
        Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify SDN.Use \
        VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit \
        VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory \
        VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor \
        VM.PowerMgmt User.Modify"
    fi
  run_once: true

- name: Assign Terraform role to user at root
  shell: |
    if ! pveum acl list / | grep -E "terraform@pve.*Terraform"; then
      pveum aclmod / -user terraform@pve -role Terraform
    fi
  run_once: true

- name: Create Terraform API token if missing
  shell: |
    if ! pveum user token list terraform@pve | grep -qw provider; then
      pveum user token add terraform@pve provider --privsep=0
    fi
  register: tf_token
  run_once: true

# 2) Copy CRUSH map
- name: Copy CRUSH map
  copy:
    src: "{{ playbook_dir }}/../{{ pve_ceph_custom_crushmap }}"
    dest: /tmp/crushmap.txt

- name: Compile CRUSH map
  command: crushtool -c /tmp/crushmap.txt -o /tmp/crushmap.bin

- name: Apply CRUSH map
  command: ceph osd setcrushmap -i /tmp/crushmap.bin

# 3) CSI Ceph pools
- name: Create CSI Ceph pools
  ceph.automation.ceph_pool:
    cluster: ceph
    name: "{{ item.name }}"
    pg_num: "{{ item.pg_num }}"
    pgp_num: "{{ item.pg_num }}"
    state: present
    type: "{{ item.type }}"
    crush_ruleset: "{{ item.rule_id | default(item.rule) }}"
  loop: "{{ ceph_csi_pools }}"

# 4) CephFS filesystems
- name: Create CephFS filesystems
  ceph.automation.ceph_fs:
    cluster: ceph
    name: "{{ item.name }}"
    metadata_pool: "{{ item.metadata_pool }}"
    data_pool: "{{ item.data_pool }}"
    state: present
  loop: "{{ ceph_csi_fs }}"

# 5) CSI CephX client keys
- name: Create CSI CephX client keys
  ceph.automation.ceph_key:
    cluster: ceph
    key_name: "{{ item.entity }}"
    caps: "{{ item.caps }}"
    state: present
    dest: "/etc/ceph/{{ item.entity }}.keyring"
  loop: "{{ ceph_csi_clients.values() | list }}"

# 6) CephFS subvolume groups
- name: Create CephFS subvolume groups
  command: >-
    ceph fs subvolume group create {{ item.fs }} {{ item.group }}
  loop: "{{ ceph_csi_subvol_groups }}"

# 7) Static PV subvolumes
- name: Create static PV subvolumes
  command: >-
    ceph fs subvolume create {{ item.fs }} {{ item.subvol }} --group {{ item.group }}
  loop: "{{ ceph_csi_static_subvols }}"

# 8) Proxmox storage definitions
- name: Add Ceph RBD storage via pvesh
  command: >-
    pvesh set /storage/rbd
      --type rbd
      --pool rbd
      --content images,rootdir,backup
      --monhost {{ groups.pve | map('extract',hostvars,'ansible_host') | join(',') }}
      --nodes {{ groups.pve | join(',') }}
  become: true

- name: Add CephFS storage via pvesh
  command: >-
    pvesh set /storage/cephfs
      --type cephfs
      --export data
      --content iso,vztmpl,rootdir
      --path /mnt/pve/cephfs
      --nodes {{ groups.pve | join(',') }}
  become: true

# 9) Datacenter config & DNS
- name: Disable PVE subscription nag
  command: pvesh set /datacenter/config --no-subscription true
  args: { warn: false }

- name: Set Datacenter DNS servers
  command: pvesh set /datacenter/config --dns fd00:255::fffe,10.255.255.254
  args: { warn: false }

# 10) /etc/hosts entries
- name: Ensure /etc/hosts has PVE entries
  lineinfile:
    path: /etc/hosts
    create: yes
    line: "{{ item }}"
  loop:
    - "fc00:255::1   pve01"
    - "fc00:255::2   pve02"
    - "fc00:255::3   pve03"

# 11) Ensure essential PVE services
- name: Ensure pve-cluster is running
  service:
    name: pve-cluster
    state: started
    enabled: true

- name: Ensure pvestatd is running
  service:
    name: pvestatd
    state: started
    enabled: true

# 12) SMTP for ZED alerts
- name: Install ssmtp
  apt:
    name: ssmtp
    state: present
    update_cache: yes

- name: Configure ssmtp
  copy:
    dest: /etc/ssmtp/ssmtp.conf
    content: |
      root=postmaster
      mailhub=smtp.sulibot.com:587
      AuthUser=you@sulibot.com
      AuthPass=supersecret
      FromLineOverride=YES
    mode: '0600'

# 13) pveproxy port
- name: Set pveproxy port
  lineinfile:
    path: /etc/default/pveproxy
    regexp: '^PVE_PROXY_PORT='
    line: 'PVE_PROXY_PORT=8006'
    create: yes

# 14) ZFS & ZED notifications
- name: Install ZFS utilities
  apt:
    name: zfsutils-linux
    state: present
    update_cache: yes

- name: Load ZFS module
  modprobe:
    name: zfs
  ignore_errors: true

- name: Configure ZED email
  lineinfile:
    path: /etc/zfs/zed.d/zed.rc
    regexp: '^MAILADDR='
    line: 'MAILADDR="sulibot@gmail.com"'
    create: true

- name: Ensure ZED is running
  service:
    name: zed
    state: started
    enabled: true

# 15) Certbot & Cloudflare DNS-01
- name: Install certbot & plugin
  apt:
    name:
      - certbot
      - python3-certbot-dns-cloudflare
    state: present
    update_cache: yes

- name: Deploy Cloudflare creds
  template:
    src: cloudflare.ini.j2
    dest: /etc/letsencrypt/cloudflare.ini
    mode: '0600'

- name: Obtain LE certs
  command: >-
    certbot certonly --dns-cloudflare
      --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini
      --agree-tos --non-interactive
      --email {{ certbot_email }}
      {% for d in pve_cert_domains %}-d {{ d }} {% endfor %}
  args:
    creates: "/etc/letsencrypt/live/{{ pve_cert_domains[0] }}/fullchain.pem"

- name: Deploy PVE SSL cert
  copy:
    src: "/etc/letsencrypt/live/{{ pve_cert_domains[0] }}/fullchain.pem"
    dest: /etc/pve/local/pve-ssl.pem
    mode: '0644'

- name: Deploy PVE SSL key
  copy:
    src: "/etc/letsencrypt/live/{{ pve_cert_domains[0] }}/privkey.pem"
    dest: /etc/pve/local/pve-ssl.key
    mode: '0600'

- name: Restart pveproxy
  service:
    name: pveproxy
    state: restarted

# 16) Ceph tuning
- name: "Ceph tuning: mon_osd_full_ratio"
  command: ceph config set mon mon_osd_full_ratio 0.85

- name: "Ceph tuning: mon_osd_nearfull_ratio"
  command: ceph config set mon mon_osd_nearfull_ratio 0.80

- name: "Tune OSD operation threads"
  command: ceph config set osd osd_op_threads 32

- name: "Tune filestore_max_sync_interval"
  command: ceph config set osd filestore_max_sync_interval 5
