#!/bin/bash
set -euxo pipefail

# sudo sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config && systemctl restart ssh
# curl -fsSL http://infraweb.sulibot.com/install/{{ inventory_hostname }}-install.sh | sudo bash

# Variables (injected by Ansible at render time)
DISK1="{{ hostvars[inventory_hostname].optane_disk }}"
DISK2="{{ hostvars[inventory_hostname].nvme_disk }}"
POOL="{{ hostvars[inventory_hostname].zfs_pool | default('rpool') }}"
PART_SIZE_GB="{{ hostvars[inventory_hostname].zfs_root_partition_size_gb | default(64) }}G"
HOSTNAME="{{ inventory_hostname }}"
DOMAIN="{{ hostname_domain }}"
NIC="{{ hostvars[inventory_hostname].proxmox_nic }}"
IPV4="{{ hostvars[inventory_hostname].proxmox_ipv4 }}"
IPV6="{{ hostvars[inventory_hostname].proxmox_ipv6 }}"
GW4="{{ hostvars[inventory_hostname].proxmox_ipv4_gw }}"
GW6="{{ hostvars[inventory_hostname].proxmox_ipv6_gw }}"
DNS_LIST=({{ hostvars[inventory_hostname].proxmox_dns | map('quote') | join(' ') }})

# sudo sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config && systemctl restart ssh

# 1) Prepare package index and install ZFS utilities
apt update
apt install -y zfs-dkms zfsutils-linux chrony debootstrap
modprobe zfs

# 2) Wipe & partition disks for EFI + ZFS root
for disk in "$DISK1" "$DISK2"; do
  wipefs -a "$disk" || true
  sgdisk --zap-all "$disk"
  # EFI System Partition, 512 MiB
  sgdisk -n1:1M:+512M -t1:EF00 -c1:"EFI System Partition" "$disk"
  # ZFS root partition of size PART_SIZE_GB
  sgdisk -n2:0:+${PART_SIZE_GB} -t2:BF01 -c2:"PVE ZFS Root" "$disk"
  mkfs.vfat -F32 -n PVEBOOT "${disk}-part1"
done

# 3) Create ZFS pool and datasets
zpool create -f \
  -o ashift=12 \
  -o cachefile=none \
  -O compression=lz4 \
  -O atime=off \
  -O xattr=sa \
  -O acltype=posixacl \
  -O mountpoint=none \
  -R /mnt \
  $POOL mirror "${DISK1}-part2" "${DISK2}-part2"

zfs create -o canmount=off -o mountpoint=none $POOL/ROOT
zfs create -o canmount=noauto -o mountpoint=/ $POOL/ROOT/"$HOSTNAME"
zpool set bootfs="$POOL/ROOT/$HOSTNAME" $POOL
zfs mount "$POOL/ROOT/$HOSTNAME"
zfs create -o mountpoint=/var/lib/vz $POOL/data

# 4) Bootstrap Debian Bookworm
# (debootstrap package already installed above)
debootstrap --variant=minbase bookworm /mnt http://deb.debian.org/debian

# 5) Mount system directories
mount --rbind /dev /mnt/dev
mount --rbind /proc /mnt/proc
mount --rbind /sys /mnt/sys
mkdir -p /mnt/boot/efi
mount "${DISK1}-part1" /mnt/boot/efi

# 6) Configure host and network files
cat > /mnt/etc/hostname <<EOF
$HOSTNAME
EOF

cat > /mnt/etc/hosts <<EOF
127.0.0.1 localhost
127.0.1.1 $HOSTNAME.$DOMAIN $HOSTNAME
${IPV4} ${HOSTNAME}.${DOMAIN} ${HOSTNAME}
${IPV6} ${HOSTNAME}.${DOMAIN} ${HOSTNAME}

::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF

# 7) Configure systemd-networkd
mkdir -p /mnt/etc/systemd/network
cat > /mnt/etc/systemd/network/10-netsetup.network <<EOF
[Match]
Name=${NIC}

[Network]
Bridge=vmbr0

[Match]
Name=vmbr0

[Network]
Address=${IPV4}/24
Gateway=${GW4}
DNS=${DNS_LIST[0]}

Address=${IPV6}/64
Gateway=${GW6}
IPv6AcceptRA=no
IPv6PrivacyExtensions=no
EOF

# Populate resolv.conf
{
  for ns in "${DNS_LIST[@]}"; do
    echo "nameserver $ns"
  done
} > /mnt/etc/resolv.conf

# Enable systemd-networkd & resolved, purge ifupdown
chroot /mnt ln -sf /lib/systemd/system/systemd-networkd.service \
  /etc/systemd/system/multi-user.target.wants/systemd-networkd.service
chroot /mnt ln -sf /lib/systemd/system/systemd-resolved.service \
  /etc/systemd/system/multi-user.target.wants/systemd-resolved.service
chroot /mnt apt purge -y ifupdown

# 8) Add SSH key for root
mkdir -p /mnt/root/.ssh
echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILS7qW4IWbXx+9hk1A59X8vTtj5gCiEglr+cKNA+gRe5 sulibot@gmail.com' \
  >> /mnt/root/.ssh/authorized_keys
chmod 700 /mnt/root/.ssh
chmod 600 /mnt/root/.ssh/authorized_keys

# 9) Install Proxmox VE and configure bootloader
chroot /mnt bash -eux <<'EOF'
export DEBIAN_FRONTEND=noninteractive
apt update
# ensure HTTPS apt transport
apt install -y apt-transport-https
apt install -y curl gnupg ca-certificates

# Add no-subscription repo
install -d /etc/apt/keyrings
curl -fsSL https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg \
  | gpg --dearmor -o /etc/apt/keyrings/proxmox-release-bookworm.gpg

echo "deb [signed-by=/etc/apt/keyrings/proxmox-release-bookworm.gpg] http://download.proxmox.com/debian/pve bookworm pve-no-subscription" \
  > /etc/apt/sources.list.d/pve-install-repo.list

# Update packages & install Proxmox VE
apt update
apt install -y proxmox-ve postfix open-iscsi
apt remove -y --purge linux-image-amd64 os-prober

# Regenerate initramfs (must precede EFI embed)
update-initramfs -u -k all

# Embed EFI stub and initramfs into both ESPs
for esp in "${DISK1}-part1" "${DISK2}-part1"; do
  proxmox-boot-tool format "$esp"
  proxmox-boot-tool init   "$esp"
done

# Ensure GRUB installed as fallback
grub-install --target=x86_64-efi --efi-directory=/boot/efi \
  --bootloader-id=proxmox --recheck
update-grub

# Enable Proxmox services & locale
systemctl enable pve-cluster pvedaemon pveproxy pvestatd
ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
dpkg-reconfigure -f noninteractive tzdata
locale-gen en_US.UTF-8
update-locale LANG=en_US.UTF-8
EOF

# 10) Cleanup and reboot
umount -Rl /mnt
zpool export "$POOL"
echo "Installation complete, rebooting..."
reboot
