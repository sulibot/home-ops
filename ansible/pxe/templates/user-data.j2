#cloud-config

users:
  - name: root
    passwd: "$6$XzTLR7ZbQeayKSZk$V3C0YkflG9ZoeINgYQSt28JmKdtw3tA2.VkMHm1a.qUSh4TUt0xyTaeZ4mUSUb5qxlND1jvqOjHkQlHkMGeqd/"
    ssh-authorized-keys:
      - {{ hostvars[item].ssh_pubkey }}
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash

hostname: {{ item }}
fqdn: {{ item }}.{{ hostname_domain }}

packages:
  - zfsutils-linux
  - zfs-initramfs
  - zfs-dkms
  - grub-efi-amd64
  - linux-headers-amd64
  - parted
  - zfs-mountall

network:
  version: 2
  ethernets:
    {{ hostvars[item].proxmox_nic }}:
      dhcp4: false
      dhcp6: false
      addresses:
        - "{{ hostvars[item].proxmox_ipv4 }}/24"
        - "{{ hostvars[item].proxmox_ipv6 }}/64"
      gateway4: "{{ hostvars[item].proxmox_ipv4_gw }}"
      gateway6: "{{ hostvars[item].proxmox_ipv6_gw }}"
      nameservers:
        addresses: [{{ hostvars[item].proxmox_dns | map('quote') | join(', ') }}]

runcmd:
#  - [ "bash", "-c", "sleep 600" ]                      
  # Partition both disks
  - [ "parted", "-s", "{{ hostvars[item].optane_disk }}", "mklabel", "gpt" ]
  - [ "parted", "-s", "{{ hostvars[item].optane_disk }}", "mkpart", "ESP", "fat32", "1MiB", "513MiB" ]
  - [ "parted", "-s", "{{ hostvars[item].optane_disk }}", "set", "1", "boot", "on" ]
  - [ "parted", "-s", "{{ hostvars[item].optane_disk }}", "mkpart", "primary", "513MiB", "{{ 513 + (hostvars[item].zfs_root_partition_size_gb * 1024) }}MiB" ]

  - [ "parted", "-s", "{{ hostvars[item].nvme_disk }}", "mklabel", "gpt" ]
  - [ "parted", "-s", "{{ hostvars[item].nvme_disk }}", "mkpart", "ESP", "fat32", "1MiB", "513MiB" ]
  - [ "parted", "-s", "{{ hostvars[item].nvme_disk }}", "set", "1", "boot", "on" ]
  - [ "parted", "-s", "{{ hostvars[item].nvme_disk }}", "mkpart", "primary", "513MiB", "{{ 513 + (hostvars[item].zfs_root_partition_size_gb * 1024) }}MiB" ]

  # Ensure ZFS module is available now
  - [ "modprobe", "zfs" ]

  # Format EFI partitions
  - [ "mkfs.vfat", "-F32", "{{ hostvars[item].optane_disk }}-part1" ]
  - [ "mkfs.vfat", "-F32", "{{ hostvars[item].nvme_disk }}-part1" ]

  # Install GRUB to first EFI
  - [ "mkdir", "-p", "/boot/efi" ]
  - [ "mount", "{{ hostvars[item].optane_disk }}-part1", "/boot/efi" ]
  - [ "grub-install", "--target=x86_64-efi", "--efi-directory=/boot/efi", "--bootloader-id=debian", "--recheck", "--no-nvram", "--removable", "2>&1", "|", "tee", "/root/grub-install.log" ]
  - [ "umount", "/boot/efi" ]

  # Mount second EFI
  - [ "mount", "{{ hostvars[item].nvme_disk }}-part1", "/boot/efi" ]

  # Create mirrored ZFS pool
  - [ "zpool", "create", "-f", "{{ hostvars[item].zfs_pool }}",
      "mirror",
      "{{ hostvars[item].optane_disk }}-part2",
      "{{ hostvars[item].nvme_disk }}-part2",
      "-o", "ashift=12",
      "-O", "compression=lz4",
      "-O", "atime=off",
      "-O", "mountpoint=none" ]

  # Create datasets
  - [ "zfs", "create", "-o", "mountpoint=/", "-o", "canmount=noauto", "{{ hostvars[item].zfs_pool }}/ROOT/debian" ]
  - [ "zfs", "create", "-o", "mountpoint=/var/lib/vz", "{{ hostvars[item].zfs_pool }}/vmdata" ]
  - [ "zpool", "set", "bootfs={{ hostvars[item].zfs_pool }}/ROOT/debian", "{{ hostvars[item].zfs_pool }}" ]

  # Set ZFS pool cachefile and reimport before mounting root
  - [ "zfs", "mount", "{{ hostvars[item].zfs_pool }}/ROOT/debian" ]
  - [ "mount", "--bind", "/boot/efi", "/boot/efi" ]

  # Export and re-import ZFS pool to ensure correct cache file
  - [ "zpool", "set", "cachefile=/etc/zfs/zpool.cache", "{{ hostvars[item].zfs_pool }}" ]
  - [ "zpool", "export", "{{ hostvars[item].zfs_pool }}" ]
  - [ "zpool", "import", "-d", "/dev/disk/by-id", "-R", "/", "{{ hostvars[item].zfs_pool }}" ]

  # Optional: verify import + mount state
  - [ "zpool", "import", "-a" ]
  - [ "zfs", "mount", "-a" ]
  - [ "zfs", "list" ]

  # Update GRUB config
  - [ "sed", "-i", "s|^#GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT=\"quiet root=ZFS={{ hostvars[item].zfs_pool }}/ROOT/debian\"|", "/etc/default/grub" ]
  - [ "sed", "-i", "/^#*GRUB_TERMINAL=/d", "/etc/default/grub" ]
  - [ "echo", "GRUB_TERMINAL=console", ">>", "/etc/default/grub" ]

  # Add ZFS boot delay
  - [ "sed", "-i", "/^#*ZFS_INITRD_PRE_MOUNTROOT_SLEEP=/d", "/etc/default/zfs" ]
  - [ "echo", "ZFS_INITRD_PRE_MOUNTROOT_SLEEP=5", ">>", "/etc/default/zfs" ]

  # Rebuild boot environment inside ZFS root
  - [ "chroot", "/", "update-initramfs", "-u" ]
  - [ "chroot", "/", "update-grub" ]

  # Pause to inspect system state before reboot
  - [ "bash", "-c", "sleep 600" ]

  # Reboot into system
#  - [ "reboot" ]
