#!/usr/bin/env bash
set -euo pipefail

# VIP Configuration - support both IPv4 and IPv6
%{ if enable_ipv4 && enable_ipv6 }
VIP_V4="${vip_ipv4_loopback_ip}"
VIP_V6="${vip_ipv6_loopback_ip}"
LOOPBACK_V4="${egress_ipv4_loopback_id_ip}"
LOOPBACK_V6="${egress_ipv6_loopback_id_ip}"
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
VIP_V4="${vip_ipv4_loopback_ip}"
LOOPBACK_V4="${egress_ipv4_loopback_id_ip}"
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
VIP_V6="${vip_ipv6_loopback_ip}"
LOOPBACK_V6="${egress_ipv6_loopback_id_ip}"
%{ endif }

IFACE_LABEL_V4="lo:vip4"
IFACE_LABEL_V6="lo:vip6"
LOCKFILE="/run/k8s-vip.lock"
STATE_DIR="/run/k8s-vip"
mkdir -p "$${STATE_DIR}"

# Hysteresis / debounce (can be overridden by systemd Environment=)
RISE="${rise}"
FALL="${fall}"
COOLDOWN="${cooldown}"

OK_COUNT_FILE="$${STATE_DIR}/ok.count"
FAIL_COUNT_FILE="$${STATE_DIR}/fail.count"
LAST_CHANGE_FILE="$${STATE_DIR}/last_change.ts"
: >"$${OK_COUNT_FILE}"
: >"$${FAIL_COUNT_FILE}"
: >"$${LAST_CHANGE_FILE}"

now() { date +%s; }

cooldown_active() {
  local ts=0
  [[ -s "$${LAST_CHANGE_FILE}" ]] && ts=$$(cat "$${LAST_CHANGE_FILE}" || echo 0)
  (( $$(now) - ts < COOLDOWN ))
}

has_vip() {
%{ if enable_ipv4 && enable_ipv6 }
  ip -4 addr show dev lo | grep -q " $${VIP_V4}/32" && \
  ip -6 addr show dev lo | grep -q " $${VIP_V6}/128"
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
  ip -4 addr show dev lo | grep -q " $${VIP_V4}/32"
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
  ip -6 addr show dev lo | grep -q " $${VIP_V6}/128"
%{ endif }
}

eligible_node() {
  # Only run on control-plane nodes that actually host the apiserver static pod
  [[ -f /etc/kubernetes/manifests/kube-apiserver.yaml ]]
}

check_for_split_brain() {
  # Check if another node has the VIP to prevent split-brain
%{ if enable_ipv4 && enable_ipv6 }
  local other_holders_v4=0
  local other_holders_v6=0
  
  # Check IPv4 VIP
  if command -v arping >/dev/null 2>&1; then
    other_holders_v4=$$(arping -c 3 -I eth0 "$${VIP_V4}" 2>/dev/null | grep -c "reply from" || echo 0)
  fi
  
  # Check IPv6 VIP
  if command -v ndisc6 >/dev/null 2>&1; then
    other_holders_v6=$$(ndisc6 -1 "$${VIP_V6}" eth0 2>/dev/null | wc -l || echo 0)
  fi
  
  if [ $other_holders_v4 -gt 1 ] || [ $other_holders_v6 -gt 1 ]; then
    logger -t k8s-vip "WARNING: Possible split-brain detected! IPv4 holders: $other_holders_v4, IPv6 holders: $other_holders_v6"
    return 1
  fi
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
  local other_holders=0
  if command -v arping >/dev/null 2>&1; then
    other_holders=$$(arping -c 3 -I eth0 "$${VIP_V4}" 2>/dev/null | grep -c "reply from" || echo 0)
  fi
  
  if [ $other_holders -gt 1 ]; then
    logger -t k8s-vip "WARNING: Possible split-brain detected! Holders: $other_holders"
    return 1
  fi
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
  local other_holders=0
  if command -v ndisc6 >/dev/null 2>&1; then
    other_holders=$$(ndisc6 -1 "$${VIP_V6}" eth0 2>/dev/null | wc -l || echo 0)
  fi
  
  if [ $other_holders -gt 1 ]; then
    logger -t k8s-vip "WARNING: Possible split-brain detected! Holders: $other_holders"
    return 1
  fi
%{ endif }
  return 0
}

check_apiserver_health() {
  local checks_passed=0
  local total_checks=3
  local timeout=3
  
%{ if enable_ipv4 && enable_ipv6 }
  # Try IPv6 first, then IPv4 as fallback
  local loopback_ip="$${LOOPBACK_V6}"
  local url_prefix="https://[$${loopback_ip}]"
  
  # If IPv6 fails, try IPv4
  if ! curl --silent --max-time 1 "$${url_prefix}:6443" >/dev/null 2>&1; then
    loopback_ip="$${LOOPBACK_V4}"
    url_prefix="https://$${loopback_ip}"
  fi
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
  local loopback_ip="$${LOOPBACK_V4}"
  local url_prefix="https://$${loopback_ip}"
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
  local loopback_ip="$${LOOPBACK_V6}"
  local url_prefix="https://[$${loopback_ip}]"
%{ endif }
  
  # 1. Check readyz endpoint (most important)
  if curl --silent --show-error --max-time $${timeout} "$${url_prefix}:6443/readyz" -k 2>/dev/null | grep -q "ok"; then
    ((checks_passed++))
  fi
  
  # 2. Check if etcd is responding
  if curl --silent --show-error --max-time $${timeout} "$${url_prefix}:6443/healthz/etcd" -k 2>/dev/null | grep -q "ok"; then
    ((checks_passed++))
  fi
  
  # 3. Check scheduler health
  if curl --silent --show-error --max-time $${timeout} "$${url_prefix}:6443/healthz/poststarthook/scheduling/bootstrap-system-priority-classes" -k 2>/dev/null | grep -q "ok"; then
    ((checks_passed++))
  fi
  
  # Require at least 2 out of 3 checks to pass for redundancy
  (( checks_passed >= 2 ))
}

check_network_connectivity() {
%{ if enable_ipv4 && enable_ipv6 }
  # Check both gateways are reachable
  ping -c 1 -W 1 "${mesh_ipv4_iface_gateway}" >/dev/null 2>&1 && \
  ping6 -c 1 -W 1 "${mesh_ipv6_iface_gateway}" >/dev/null 2>&1
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
  # Check IPv4 gateway
  ping -c 1 -W 1 "${mesh_ipv4_iface_gateway}" >/dev/null 2>&1
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
  # Check IPv6 gateway
  ping6 -c 1 -W 1 "${mesh_ipv6_iface_gateway}" >/dev/null 2>&1
%{ endif }
}

add_vip() {
%{ if enable_ipv4 && enable_ipv6 }
  ip -4 addr add "$${VIP_V4}/32" dev lo label "$${IFACE_LABEL_V4}" 2>/dev/null || true
  ip -6 addr add "$${VIP_V6}/128" dev lo label "$${IFACE_LABEL_V6}" 2>/dev/null || true
  logger -t k8s-vip "Added VIPs: IPv4=$${VIP_V4}, IPv6=$${VIP_V6}"
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
  ip -4 addr add "$${VIP_V4}/32" dev lo label "$${IFACE_LABEL_V4}" 2>/dev/null || true
  logger -t k8s-vip "Added VIP: IPv4=$${VIP_V4}"
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
  ip -6 addr add "$${VIP_V6}/128" dev lo label "$${IFACE_LABEL_V6}" 2>/dev/null || true
  logger -t k8s-vip "Added VIP: IPv6=$${VIP_V6}"
%{ endif }
}

remove_vip() {
%{ if enable_ipv4 && enable_ipv6 }
  ip -4 addr del "$${VIP_V4}/32" dev lo label "$${IFACE_LABEL_V4}" 2>/dev/null || true
  ip -6 addr del "$${VIP_V6}/128" dev lo label "$${IFACE_LABEL_V6}" 2>/dev/null || true
  logger -t k8s-vip "Removed VIPs: IPv4=$${VIP_V4}, IPv6=$${VIP_V6}"
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
  ip -4 addr del "$${VIP_V4}/32" dev lo label "$${IFACE_LABEL_V4}" 2>/dev/null || true
  logger -t k8s-vip "Removed VIP: IPv4=$${VIP_V4}"
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
  ip -6 addr del "$${VIP_V6}/128" dev lo label "$${IFACE_LABEL_V6}" 2>/dev/null || true
  logger -t k8s-vip "Removed VIP: IPv6=$${VIP_V6}"
%{ endif }
}

log_vip_event() {
  local action=$1
  local reason=$2
  local node=$(hostname)
  logger -t k8s-vip "VIP $${action}: $${reason} (node: $${node})"
  
  # Log to systemd journal with structured data
  systemd-cat -t k8s-vip -p info <<EOF
VIP_ACTION=$${action}
VIP_REASON=$${reason}
NODE_NAME=$${node}
%{ if enable_ipv4 && enable_ipv6 }
VIP_V4=$${VIP_V4}
VIP_V6=$${VIP_V6}
%{ endif }
%{ if enable_ipv4 && !enable_ipv6 }
VIP_V4=$${VIP_V4}
%{ endif }
%{ if !enable_ipv4 && enable_ipv6 }
VIP_V6=$${VIP_V6}
%{ endif }
EOF
}

# Main execution with file locking to prevent concurrent runs
{
  flock -n 200 || {
    logger -t k8s-vip "Another instance is running, exiting"
    exit 0
  }

  # Pre-flight checks
  if ! eligible_node; then
    exit 0
  fi
  
  if cooldown_active; then
    exit 0
  fi

  # Check network connectivity first
  if ! check_network_connectivity; then
    logger -t k8s-vip "Network connectivity check failed, skipping health check"
    exit 0
  fi

  # Perform API server health check
  if check_apiserver_health; then
    # API server is healthy
    ok=$$(cat "$${OK_COUNT_FILE}" 2>/dev/null || echo 0)
    ok=$$(($${ok}+1))
    echo "$${ok}" >"$${OK_COUNT_FILE}"
    echo 0 >"$${FAIL_COUNT_FILE}"
    
    if ! has_vip && (( $${ok} >= RISE )); then
      # Check for split-brain before adding VIP
      if check_for_split_brain; then
        add_vip
        log_vip_event "ADDED" "API server healthy for $${ok} consecutive checks (rise=$${RISE})"
        echo $$(now) >"$${LAST_CHANGE_FILE}"
      else
        logger -t k8s-vip "Refusing to add VIP - split-brain risk detected"
      fi
    fi
  else
    # API server is unhealthy
    fail=$$(cat "$${FAIL_COUNT_FILE}" 2>/dev/null || echo 0)
    fail=$$(($${fail}+1))
    echo "$${fail}" >"$${FAIL_COUNT_FILE}"
    echo 0 >"$${OK_COUNT_FILE}"
    
    if has_vip && (( $${fail} >= FALL )); then
      remove_vip
      log_vip_event "REMOVED" "API server unhealthy for $${fail} consecutive checks (fall=$${FALL})"
      echo $$(now) >"$${LAST_CHANGE_FILE}"
    fi
  fi
} 200>"$${LOCKFILE}"